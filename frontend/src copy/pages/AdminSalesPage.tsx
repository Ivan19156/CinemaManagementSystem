import React, { useEffect, useState } from "react";
import {
  Box,
  Button,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Stack,
  TextField,
  Typography,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import { toast, ToastContainer } from "react-toastify";
import { api } from "../api/axios";
import { SaleDto, CreateSaleDto, UpdateSaleDto} from "../types/sale.types.ts";


export const AdminSalesPage = () => {
  const [sales, setSales] = useState<SaleDto[]>([]);
  const [searchId, setSearchId] = useState("");
  const [editForm, setEditForm] = useState<UpdateSaleDto | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);

  const [newSale, setNewSale] = useState<CreateSaleDto>({
    userId: 0,
    ticketId: 0,
    amount: 0,
    ticketsCount: 0,
    totalPrice: 0,
    saleDate: "",
  });

  const fetchAll = async () => {
    try {
      const res = await api.get<SaleDto[]>("/sales");
      setSales(res.data);
    } catch {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤");
    }
  };

  const fetchById = async () => {
    if (!searchId) return toast.warn("–í–≤–µ–¥—ñ—Ç—å ID");
    try {
      const res = await api.get<SaleDto>(`/sales/${searchId}`);
      setSales([res.data]);
    } catch {
      toast.error("–ü—Ä–æ–¥–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
  };

  const createSale = async () => {
    try {
      await api.post("/sales", newSale);
      toast.success("–ü—Ä–æ–¥–∞–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ");
      setNewSale({
        userId: 0,
        ticketId: 0,
        amount: 0,
        ticketsCount: 0,
        totalPrice: 0,
        saleDate: "",
      });
      fetchAll();
    } catch {
      toast.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É");
    }
  };

  const deleteSale = async (id: number) => {
    try {
      await api.delete(`/sales/${id}`);
      toast.success("–ü—Ä–æ–¥–∞–∂ –≤–∏–¥–∞–ª–µ–Ω–æ");
      fetchAll();
    } catch {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
    }
  };

  const openEditDialog = (sale: UpdateSaleDto) => {
    setEditForm(sale);
    setEditDialogOpen(true);
  };

  const handleUpdate = async () => {
    if (!editForm) return;
    try {
      await api.put(`/sales/${editForm.id}`, editForm);
      toast.success("–ü—Ä–æ–¥–∞–∂ –æ–Ω–æ–≤–ª–µ–Ω–æ");
      setEditDialogOpen(false);
      setEditForm(null);
      fetchAll();
    } catch {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è");
    }
  };

  useEffect(() => {
    fetchAll();
  }, []);

  return (
    <Container sx={{ py: 4 }}>
      <ToastContainer />
      <Typography variant="h4" gutterBottom>
        –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂–∞–º–∏
      </Typography>

      {/* –ü–æ—à—É–∫ –∑–∞ ID */}
      <Stack direction="row" spacing={2} mb={4} flexWrap="wrap" alignItems="center">
        <TextField
          label="ID –ø—Ä–æ–¥–∞–∂—É"
          variant="outlined"
          size="small"
          value={searchId}
          onChange={(e) => setSearchId(e.target.value)}
        />
        <Button variant="contained" onClick={fetchById}>
          –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞ ID
        </Button>
        <Button variant="outlined" onClick={fetchAll}>
          –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ
        </Button>
      </Stack>

      {/* –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É */}
      <Box mb={4} maxWidth={400}>
        <Typography variant="h6" gutterBottom>
          –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–¥–∞–∂
        </Typography>
        <Stack spacing={2}>
          <TextField
            label="ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            type="number"
            value={newSale.userId}
            onChange={(e) => setNewSale({ ...newSale, userId: Number(e.target.value) })}
          />
          <TextField
            label="ID –∫–≤–∏—Ç–∫–∞"
            type="number"
            value={newSale.ticketId}
            onChange={(e) => setNewSale({ ...newSale, ticketId: Number(e.target.value) })}
          />
          <TextField
            label="–°—É–º–∞ –∑–∞ –∫–≤–∏—Ç–æ–∫"
            type="number"
            value={newSale.amount}
            onChange={(e) => setNewSale({ ...newSale, amount: Number(e.target.value) })}
          />
          <TextField
            label="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤"
            type="number"
            value={newSale.ticketsCount}
            onChange={(e) => setNewSale({ ...newSale, ticketsCount: Number(e.target.value) })}
          />
          <TextField
            label="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"
            type="number"
            value={newSale.totalPrice}
            onChange={(e) => setNewSale({ ...newSale, totalPrice: Number(e.target.value) })}
          />
          <TextField
            label="–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É"
            type="datetime-local"
            value={newSale.saleDate}
            onChange={(e) => setNewSale({ ...newSale, saleDate: e.target.value })}
            InputLabelProps={{ shrink: true }}
          />
          <Button variant="contained" onClick={createSale}>
            –°—Ç–≤–æ—Ä–∏—Ç–∏
          </Button>
        </Stack>
      </Box>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂—ñ–≤ */}
      <Typography variant="h5" gutterBottom>
        –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂—ñ–≤
      </Typography>
      <List>
        {sales.map((s) => (
          <ListItem
            key={s.id}
            divider
            secondaryAction={
              <>
                <IconButton edge="end" aria-label="edit" onClick={() => openEditDialog({
                  id: s.id,
                  userId: s.userId,
                  ticketsCount: s.ticketsCount,
                  totalPrice: s.totalPrice,
                  saleDate: s.saleDate,
                })}>
                  <EditIcon />
                </IconButton>
                <IconButton edge="end" aria-label="delete" onClick={() => deleteSale(s.id)}>
                  <DeleteIcon />
                </IconButton>
              </>
            }
          >
            <ListItemText
              primary={`–ü—Ä–æ–¥–∞–∂ #${s.id}`}
              secondary={
                <>
                  üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: {s.userId} <br />
                  üéüÔ∏è –ö–≤–∏—Ç–æ–∫ ID: {s.ticketId} <br />
                  üßæ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {s.ticketsCount}, –°—É–º–∞: {s.totalPrice} –≥—Ä–Ω <br />
                  üìÖ –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É: {new Date(s.saleDate).toLocaleString()} <br />
                  üßæ TicketIds: {s.ticketIds.join(", ")}
                </>
              }
            />
          </ListItem>
        ))}
      </List>

      {/* –î—ñ–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É */}
      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>
        <DialogTitle>–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂</DialogTitle>
        <DialogContent>
          <Stack spacing={2} sx={{ mt: 1, minWidth: 300 }}>
            <TextField
              label="ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
              type="number"
              value={editForm?.userId || 0}
              onChange={(e) =>
                setEditForm((prev) => (prev ? { ...prev, userId: Number(e.target.value) } : null))
              }
            />
            <TextField
              label="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤"
              type="number"
              value={editForm?.ticketsCount || 0}
              onChange={(e) =>
                setEditForm((prev) => (prev ? { ...prev, ticketsCount: Number(e.target.value) } : null))
              }
            />
            <TextField
              label="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"
              type="number"
              value={editForm?.totalPrice || 0}
              onChange={(e) =>
                setEditForm((prev) => (prev ? { ...prev, totalPrice: Number(e.target.value) } : null))
              }
            />
            <TextField
              label="–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É"
              type="datetime-local"
              value={editForm?.saleDate || ""}
              onChange={(e) =>
                setEditForm((prev) => (prev ? { ...prev, saleDate: e.target.value } : null))
              }
              InputLabelProps={{ shrink: true }}
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditDialogOpen(false)}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
          <Button variant="contained" onClick={handleUpdate}>
            –û–Ω–æ–≤–∏—Ç–∏
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};
